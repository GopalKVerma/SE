<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>


<!-- Basic -->
<meta charset="utf-8">
<title>Software Implementation</title>
<meta name="description" content="Software Engineering Overview - Learn Software Engineering Concepts in simple and easy steps starting from their overview and then covering  software analysis, software requirements, software design and its complexities, interface design, software design strategies, software development life cycle, software implementation, project management, software testing  and maintenance etc." />
<meta name="keywords" content="Software, Engineering, Tutorials,  Conccepts, simple,  easy,  steps, overview, software, analysis, requirements, design , complexities, interface,strategies, development, life, cycle, implementation, project management, testing, maintenance" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="author" content="tutorialspoint.com">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<!-- Libs CSS -->
<link rel="stylesheet" href="/scripts/css/bootstrap.css">
<link rel="stylesheet" href="/scripts/css/fonts/font-awesome/css/font-awesome.css">
<!-- Theme CSS -->
<link rel="stylesheet" href="/scripts/css/theme.css">
<link rel="stylesheet" href="/scripts/css/theme-elements.css">
<!-- Current Page Styles -->
<link rel="stylesheet" href="/scripts/vendor/rs-plugin/css/settings.css" media="screen">
<!-- Skin CSS -->
<link rel="stylesheet" href="/scripts/css/skins/green.css"/>
<!-- Responsive CSS -->
<link rel="stylesheet" href="/scripts/css/theme-responsive.css" />
<!-- Head Libs -->
<script src="/scripts/vendor/modernizr.js"></script>
<!--[if IE]>
<link rel="stylesheet" href="/scripts/css/ie.css">
<![endif]-->
<!--[if lte IE 8]>
<script src="/scripts/vendor/respond.js"></script>
<![endif]-->
<!-- Front Page related changes -->
<link rel="stylesheet" href="/scripts/css/custom.css"/>
<style>
header nav ul.nav-main ul.dropdown-menu, 
nav.mega-menu .mega-menu-signin .dropdown-menu li,
li.heading, footer div.footer-ribon, div.footer-copyright, 
header nav ul.nav-main li.dropdown:hover a {
   background-color: #779a3b !important;
}
footer ul.list li{
   background: none !important;
   padding: 0px;
}
footer i.icon, footer ul.list.icons li i {
   color: #779a3b !important;
}
</style>
</head>
<body>
<div class="body">
<header>
<div class="container">
<h1 class="logo">
<a href="index.htm">
<img alt="tutorialspoint" src="/app/images/logo.png">
</a>
</h1>
<div class="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<div class="input-group">
<input type="text" class="form-control search" name="q" id="q" placeholder="Search your tutorials..." onfocus="if (this.value == 'Search your tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your tutorials...';}">
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<span class="input-group-btn">
<button class="btn btn-default" type="submit"><i class="icon icon-search"></i></button>
</span>
</div>
</form>
</div>

<button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse">
<i class="icon icon-bars"></i>
</button>
</div>
<div class="navbar-collapse nav-main-collapse collapse">
<div class="container">
<nav class="nav-main mega-menu">
<ul class="nav nav-pills nav-main" id="mainMenu">
   <li class="dropdown">
   <a class="dropdown" href="/index.htm">
   Home
   <i class="icon icon-home"></i>
   </a>
   </li>   
   
</ul>
</nav>
</div>
</div>
</header>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-3">
<aside class="sidebar">
<div class="mini-logo">
<img src="images/se-mini-logo.png" alt="QTP Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">Software Engineering Tutorial</li>
<li><a  href="/app/index.htm">Software Engineering Home</a></li>
<li><a  href="/app/software_engineering_overview.htm">Software Engineering Overview</a></li>
<li><a  href="/app/software_development_life_cycle.htm">Software Development Life Cycle</a></li>
<li><a  href="/app/software_project_management.htm">Software Project Management</a></li>
<li><a  href="/app/software_requirements.htm">Software Requirements</a></li>
<li><a  href="/app/software_design_basics.htm">Software Design Basics</a></li>
<li><a  href="/app/software_analysis_design_tools.htm">Analysis &amp; Design Tools</a></li>
<li><a  href="/app/software_design_strategies.htm">Software Design Strategies</a></li>
<li><a  href="/app/software_user_interface_design.htm">Software User Interface Design</a></li>
<li><a  href="/app/software_design_complexity.htm">Software Design Complexity</a></li>
<li><a  href="/app/software_implementation.htm">Software Implementation</a></li>
<li><a  href="/app/software_testing_overview.htm">Software Testing Overview</a></li>
<li><a  href="/app/software_maintenance_overview.htm">Software Maintenance</a></li>
<li><a  href="/app/case_tools_overview.htm">CASE Tools Overview</a></li>
</ul>
<ul class="nav nav-list primary left-menu special">
<li class="heading">S/W Engineering Resources</li>
<li><a  href="/app/software_engineering_interview_questions.htm">SE - Interview Questions</a></li>
<li><a  href="/app/software_engineering_useful_resources.htm">SE - Useful Resources</a></li>
<li><a  href="/app/software_engineering_quick_guide.htm">SE - Quick Guide</a></li>
</ul>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Software Implementation</h1>
<hr>
 
 <div class="pre-btn">
<a href="/app/software_design_complexity.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/app/software_testing_overview.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr>

<p>In this chapter, we will study about programming methods, documentation and challenges in software implementation.</p>
<h2>Structured Programming</h2>
<p>In the process of coding, the lines of code keep multiplying, thus, size of the software increases. Gradually, it becomes next to impossible to remember the flow of program. If one forgets how software and its underlying programs, files, procedures are constructed it then becomes very difficult to share, debug and modify the program. The solution to this is structured programming. It encourages the developer to use subroutines and loops instead of using simple jumps in the code, thereby bringing clarity in the code and improving its efficiency Structured programming also helps programmer to reduce coding time and organize code properly.</p>
<p>Structured programming states how the program shall be coded.  Structured programming uses three main concepts:</p>
<h3>Top-down analysis</h3>
<p>A software is always made to perform some rational work. This rational work is known as problem in the software parlance. Thus it is very important that we understand how to solve the problem. Under top-down analysis, the problem is broken down into small pieces where each one has some significance. Each problem is individually solved and steps are clearly stated about how to solve the problem.</p>
<h3>Modular Programming</h3>
<p>While programming, the code is broken down into smaller group of instructions. These groups are known as modules, subprograms or subroutines. Modular programming based on the understanding of top-down analysis. It discourages jumps using 'goto' statements in the program, which often makes the program flow non-traceable. Jumps are prohibited and modular format is encouraged in structured programming. </p>
<h3>Structured Coding</h3>
<p>In reference with top-down analysis, structured coding sub-divides the modules into further smaller units of code in the order of their execution. Structured programming uses control structure, which controls the flow of the program, whereas structured coding uses control structure to organize its instructions in definable patterns.</p>
<h2>Functional Programming</h2>
<p>Functional programming is style of programming language, which uses the concepts of mathematical functions. A function in mathematics should always produce the same result on receiving the same argument. In procedural languages, the flow of the program runs through procedures, i.e. the control of program is transferred to the called procedure. While control flow is transferring from one procedure to another, the program changes its state.</p>
<p>In procedural programming, it is possible for a procedure to produce different results when it is called with the same argument, as the program itself can be in different state while calling it. This is a property as well as a drawback of procedural programming, in which the sequence or timing of the procedure execution becomes important.</p>
<p>Functional programming provides means of computation as mathematical functions, which produces results irrespective of program state. This makes it possible to predict the behavior of the program.</p>
<p>Functional programming uses the following concepts:</p>
<h3>First class and High-order functions</h3>
<p>These functions have capability to accept another function as argument or they return other functions as results.</p>
<h3>Pure functions</h3>
<p>These functions do not include destructive updates, that is, they do not affect any I/O or memory and if they are not in use, they can easily be removed without hampering the rest of the program.</p>
<h3>Recursion</h3>
<p>Recursion is a programming technique where a function calls itself and repeats the program code in it unless some pre-defined condition matches. Recursion is the way of creating loops in functional programming.</p>
<h3>Strict evaluation</h3>
<p>It is a method of evaluating the expression passed to a function as an argument. Functional programming has two types of evaluation methods, strict (eager) or non-strict (lazy). Strict evaluation always evaluates the expression before invoking the function. Non-strict evaluation does not evaluate the expression unless it is needed.</p>
<h3>?-calculus</h3>
<p>Most functional programming languages use ?-calculus as their type systems. ?-expressions are executed by evaluating them as they occur.</p>
<p>Common Lisp, Scala, Haskell, Erlang and F# are some examples of functional programming languages.</p>
<h2>Programming style</h2>
<p>Programming style is set of coding rules followed by all the programmers to write the code. When multiple programmers work on the same software project, they frequently need to work with the program code written by some other developer. This becomes tedious or at times impossible, if all developers do not follow some standard programming style to code the program. </p>
<p>An appropriate programming style includes using function and variable names relevant to the intended task, using well-placed indentation, commenting code for the convenience of reader and overall presentation of code. This makes the program code readable and understandable by all, which in turn makes debugging and error solving easier. Also, proper coding style helps ease the documentation and updation.</p>
<h3>Coding Guidelines</h3>
<p>Practice of coding style varies with organizations, operating systems and language of coding itself. </p>
<p>The following coding elements may be defined under coding guidelines of an organization:</p>
<ul class="list">
<li><b>Naming conventions</b>
<p>This section defines how to name functions, variables, constants and global variables.</p></li>
<li><b>Indenting</b>
<p>This is the space left at the beginning of line, usually 2-8 whitespace or single tab.</p></li>
<li><b>Whitespace</b>
<p>It is generally omitted at the end of line.</p></li>
<li><b>Operators</b>
<p>Defines the rules of writing mathematical, assignment and logical operators. For example, assignment operator '=' should have space before and after it, as in "x = 2".</p></li>
<li><b>Control Structures</b>
<p>The rules of writing if-then-else, case-switch, while-until and for control flow statements solely and in nested fashion.</p></li>
<li><b>Line length and wrapping</b>
<p>Defines how many characters should be there in one line, mostly a line is 80 characters long. Wrapping defines how a line should be wrapped, if is too long.</p></li>
<li><b>Functions</b>
<p>This defines how functions should be declared and invoked, with and without parameters.</p></li>
<li><b>Variables</b>
<p>This mentions how variables of different data types are declared and defined.</p></li>
<li><b>Comments</b>
<p>This is one of the important coding components, as the comments included in the code describe what the code actually does and all other associated descriptions. This section also helps creating help documentations for other developers.</p></li>
</ul>
<h2>Software Documentation</h2>

<p>Software documentation is an important part of software process. A well written document provides a great tool and means of information repository necessary to know about software process. Software documentation also provides information about how to use the product.</p>

<p>A well-maintained documentation should involve the following documents:</p>
<h3>Requirement documentation</h3>

<p>This documentation works as key tool for software designer, developer and the test team to carry out their respective tasks. This document contains all the functional, non-functional and behavioral description of the intended software.  </p>

<p>Source of this document can be previously stored data about the software, already running software at the client's end, client's interview, questionnaires and research. Generally it is stored in the form of spreadsheet or word processing document with the high-end software management team.</p>

<p>This documentation works as foundation for the software to be developed and is majorly used in verification and validation phases. Most test-cases are built directly from requirement documentation.</p>
<h3>Software Design documentation</h3>
<p>These documentations contain all the necessary information, which are needed to build the software. It contains:</p>
<ul class="list">
<li>high-level software architecture</li>
<li>software design details</li>
<li>data flow diagrams</li>
<li>database design</li>
</ul>
<p>These documents work as repository for developers to implement the software. Though these documents do not give any details on how to code the program, they give all necessary information that is required for coding and implementation. </p>
<h3>Technical documentation</h3>

<p>These documentations are maintained by the developers and actual coders. These documents, as a whole, represent information about the code. While writing the code, the programmers also mention objective of the code, who wrote it, where will it be required, what it does and how it does, what other resources the code uses, etc.</p>

<p>The technical documentation increases the understanding between various programmers working on the same code. It enhances re-use capability of the code. It makes debugging easy and traceable.</p>

<p>There are various automated tools available and some comes with the programming language itself. For example java comes JavaDoc tool to generate technical documentation of code.</p>
<h3>User documentation</h3>

<p>This documentation is different from all the above explained. All previous documentations are maintained to provide information about the software and its development process. But user documentation explains how the software product should work and how it should be used to get the desired results.</p>

<p>These documentations may include, software installation procedures, how-to guides, user-guides, uninstallation method and special references to get more information like license updation etc.</p>
<h2>Software Implementation Challenges</h2>
<p>There are some challenges faced by the development team while implementing the software. Some of them are mentioned below:</p>
<ul class="list">
<li><b>Code-reuse</b>
<p>Programming interfaces of present-day languages are very sophisticated and are equipped huge library functions. Still, to bring the cost down of end product, the organization management prefers to re-use the code, which was created earlier for some other software. There are huge issues faced by programmers for compatibility checks and deciding how much code to re-use.</p></li>

<li><b>Version Management</b>
<p>Every time a new software is issued to the customer, developers have to maintain version and configuration related documentation. This documentation needs to be highly accurate and available on time.</p></li>

<li><b>Target-Host</b>
<p>The software program, which is being developed in the organization, needs to be designed for host machines at the customers end. But at times, it is impossible to design a software that works on the target machines.</p></li>
</ul>

<hr>
<div class="pre-btn">
<a href="/app/software_design_complexity.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/app/software_testing_overview.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>


<hr>
<!-- PRINTING ENDS HERE -->
</div>
</div>
<div class="row">
<div class="col-md-2">
<div class="translate">
<div id="translation_widget" style="word-spacing:3px;background-color:transparent;position:relative;top:-7px;"></div>			
</div>
<!-- AddThis Button BEGIN -->

<!-- AddThis Button END -->
</div>
</div>
</div>
</div>
</div>
<div class="footer-copyright">
<p>&copy; Copyright 2014. All Rights Reserved.</p>
</div>
</footer>
</div>
<!-- Libs -->
<script src="/scripts/vendor/jquery.js"></script>
<script src="/scripts/js/plugins.js"></script>
<script src="/scripts/vendor/bootstrap.js"></script>
<script src="/scripts/vendor/twitterjs/twitter.js"></script>
<script src="/scripts/vendor/jquery.validate.js"></script>
<!-- Current Page Scripts -->
<script src="/scripts/js/views/view.home.js"></script>
<!-- Theme Initializer -->
<script src="/scripts/js/theme.js"></script>
<!-- Custom JS -->
<script src="/scripts/js/custom.js"></script>
</div>
</body>
</html>
