<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>


<!-- Basic -->
<meta charset="utf-8">
<title>Software Maintenance Overview</title>
<meta name="description" content="Software Engineering Overview - Learn Software Engineering Concepts in simple and easy steps starting from their overview and then covering  software analysis, software requirements, software design and its complexities, interface design, software design strategies, software development life cycle, software implementation, project management, software testing  and maintenance etc." />
<meta name="keywords" content="Software, Engineering, Tutorials,  Conccepts, simple,  easy,  steps, overview, software, analysis, requirements, design , complexities, interface,strategies, development, life, cycle, implementation, project management, testing, maintenance" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="author" content="tutorialspoint.com">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<!-- Libs CSS -->
<link rel="stylesheet" href="/scripts/css/bootstrap.css">
<link rel="stylesheet" href="/scripts/css/fonts/font-awesome/css/font-awesome.css">
<!-- Theme CSS -->
<link rel="stylesheet" href="/scripts/css/theme.css">
<link rel="stylesheet" href="/scripts/css/theme-elements.css">
<!-- Current Page Styles -->
<link rel="stylesheet" href="/scripts/vendor/rs-plugin/css/settings.css" media="screen">
<!-- Skin CSS -->
<link rel="stylesheet" href="/scripts/css/skins/green.css"/>
<!-- Responsive CSS -->
<link rel="stylesheet" href="/scripts/css/theme-responsive.css" />
<!-- Head Libs -->
<script src="/scripts/vendor/modernizr.js"></script>
<!--[if IE]>
<link rel="stylesheet" href="/scripts/css/ie.css">
<![endif]-->
<!--[if lte IE 8]>
<script src="/scripts/vendor/respond.js"></script>
<![endif]-->
<!-- Front Page related changes -->
<link rel="stylesheet" href="/scripts/css/custom.css"/>
<style>
header nav ul.nav-main ul.dropdown-menu, 
nav.mega-menu .mega-menu-signin .dropdown-menu li,
li.heading, footer div.footer-ribon, div.footer-copyright, 
header nav ul.nav-main li.dropdown:hover a {
   background-color: #779a3b !important;
}
footer ul.list li{
   background: none !important;
   padding: 0px;
}
footer i.icon, footer ul.list.icons li i {
   color: #779a3b !important;
}
</style>
</head>
<body>
<div class="body">
<header>
<div class="container">
<h1 class="logo">
<a href="index.htm">
<img alt="tutorialspoint" src="/app/images/logo.png">
</a>
</h1>
<div class="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<div class="input-group">
<input type="text" class="form-control search" name="q" id="q" placeholder="Search your tutorials..." onfocus="if (this.value == 'Search your tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your tutorials...';}">
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<span class="input-group-btn">
<button class="btn btn-default" type="submit"><i class="icon icon-search"></i></button>
</span>
</div>
</form>
</div>

<button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse">
<i class="icon icon-bars"></i>
</button>
</div>
<div class="navbar-collapse nav-main-collapse collapse">
<div class="container">
<nav class="nav-main mega-menu">
<ul class="nav nav-pills nav-main" id="mainMenu">
   <li class="dropdown">
   <a class="dropdown" href="/index.htm">
   Home
   <i class="icon icon-home"></i>
   </a>
   </li>   
   
</ul>
</nav>
</div>
</div>
</header>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-3">
<aside class="sidebar">
<div class="mini-logo">
<img src="images/se-mini-logo.png" alt="QTP Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">Software Engineering Tutorial</li>
<li><a  href="/app/index.htm">Software Engineering Home</a></li>
<li><a  href="/app/software_engineering_overview.htm">Software Engineering Overview</a></li>
<li><a  href="/app/software_development_life_cycle.htm">Software Development Life Cycle</a></li>
<li><a  href="/app/software_project_management.htm">Software Project Management</a></li>
<li><a  href="/app/software_requirements.htm">Software Requirements</a></li>
<li><a  href="/app/software_design_basics.htm">Software Design Basics</a></li>
<li><a  href="/app/software_analysis_design_tools.htm">Analysis &amp; Design Tools</a></li>
<li><a  href="/app/software_design_strategies.htm">Software Design Strategies</a></li>
<li><a  href="/app/software_user_interface_design.htm">Software User Interface Design</a></li>
<li><a  href="/app/software_design_complexity.htm">Software Design Complexity</a></li>
<li><a  href="/app/software_implementation.htm">Software Implementation</a></li>
<li><a  href="/app/software_testing_overview.htm">Software Testing Overview</a></li>
<li><a  href="/app/software_maintenance_overview.htm">Software Maintenance</a></li>
<li><a  href="/app/case_tools_overview.htm">CASE Tools Overview</a></li>
</ul>
<ul class="nav nav-list primary left-menu special">
<li class="heading">S/W Engineering Resources</li>
<li><a  href="/app/software_engineering_interview_questions.htm">SE - Interview Questions</a></li>
<li><a  href="/app/software_engineering_useful_resources.htm">SE - Useful Resources</a></li>
<li><a  href="/app/software_engineering_quick_guide.htm">SE - Quick Guide</a></li>
</ul>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Software Maintenance Overview</h1>
<hr>
 
<div class="pre-btn">
<a href="/app/software_testing_overview.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/app/case_tools_overview.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr>


<p>Software maintenance is widely accepted part of SDLC now a days.  It stands for all the modifications and updations done after the delivery of software product.  There are number of reasons, why modifications are required, some of them are briefly mentioned below:</p>
<ul class="list">
<li><b>Market Conditions </b>
<p>Policies, which changes over the time, such as taxation and newly introduced constraints like, how to maintain bookkeeping, may trigger need for modification.</p></li>

<li><b>Client Requirements</b>
<p>  Over the time, customer may ask for new features or functions in the software.</p></li>
<li><b>Host Modifications </b>
<p> If any of the hardware and/or platform (such as operating system) of the target host changes, software changes are needed to keep adaptability.</p></li>
<li><b>Organization Changes</b>
<p>  If there is any business level change at client end, such as reduction of organization strength, acquiring another company, organization venturing into new business, need to modify in the original software may arise.</p></li>
</ul>
<h2>Types of maintenance </h2>
<p>In a software lifetime, type of maintenance may vary based on its nature.  It may be just a routine maintenance tasks as some bug discovered by some user or it may be a large event in itself based on maintenance size or nature.  Following are some types of maintenance based on their characteristics:</p>
<h3>Corrective Maintenance</h3>
<p> This includes modifications and updations done in order to correct or fix problems, which are either discovered by user or concluded by user error reports.</p>
<h3>Adaptive Maintenance</h3>
<p>  This includes modifications and updations applied to keep the software product up-to date and tuned to the ever changing world of technology and business environment.</p>

<h3>Perfective Maintenance</h3>
<p> This  includes modifications and updates done in order to keep the software usable over long period of time. It includes new features, new user requirements for refining the software and improve  its reliability and performance.</p>

<h3>Preventive Maintenance</h3>
<p>  This includes modifications and updations to prevent future problems of the software. It aims to attend problems, which are not significant at this moment but may cause serious issues in future.</p>

<h2>Cost of Maintenance</h2>
 
<p>Reports suggest that the cost of maintenance is high. A study on estimating software maintenance found that the cost of maintenance is as high as 67% of the cost of entire software process cycle.</p>
<p><center><img src="images/maintenance_cost_chart.png" style="border:none;" alt="Maintenance Cost Chart " ></center></p>
<p>On an average, the cost of software maintenance is more than 50% of all SDLC phases. There are various factors, which trigger maintenance cost go high, such as: </p>

<h3>Real-world factors affecting Maintenance Cost</h3>
<ul class="list">
<li>The standard age of any software is considered up to 10 to 15 years.</li>
<li>Older softwares, which were meant to work on slow machines with less memory and storage capacity cannot keep themselves challenging against newly coming enhanced softwares on modern hardware.</li>
<li>As technology advances, it becomes costly to maintain old software.</li>
<li>Most maintenance engineers are newbie and use trial and error method to rectify problem.</li>
<li>Often, changes made can easily hurt the original structure of the software, making it hard for any subsequent changes.</li>
<li>Changes are often left undocumented which may cause more conflicts in future.</li>
</ul>
<h3>Software-end factors  affecting Maintenance Cost</h3>
<ul  class="list">

<li>Structure of Software Program</li>
<li>Programming Language </li>
<li>Dependence on external environment</li>
<li>Staff reliability and availability</li>
</ul>
<h2>Maintenance Activities</h2>

<p>IEEE provides a framework for sequential maintenance process activities.  It can be used in iterative manner and can be extended so that customized items and processes can be included. </p>
<center><img src="images/maintenance_activities.png" style="border:none;" alt="Maintenance Activities" ></center>
<p>These activities go hand-in-hand with each of the following phase -</p>
<h3>Identification & Tracing</h3>
<p> It involves activities pertaining to identification of requirement of  modification or maintenance.  It is generated by user or system may itself report via logs or error messages.Here, the maintenance type is classified also.  </p>

<h3>Analysis</h3>
<p> The modification is analyzed for its impact on the system including safety and security implications. If probable impact is severe, alternative solution is looked for. A set of required modifications is then materialized into requirement specifications. The cost of modification/maintenance is analyzed and estimation is concluded.</p>

<h3>Design</h3>
<p> New modules, which need to be replaced or modified, are designed against requirement specifications set in the previous stage. Test cases are created for validation and verification.</p>
<h3>Implementation </h3>
<p> The new modules are coded with the help of structured design created in the design step.Every programmer is expected to do unit testing in parallel. </p>

<h3>System Testing</h3>
<p> Integration testing is done among newly created modules. Integration testing is also carried out between  new modules and the system. Finally the system is tested as a whole, following regressive testing procedures.</p>

<h3>Acceptance Testing</h3>
<p> After testing the system internally, it is tested for acceptance with the help of users. If at this state, user complaints some issues they are addressed or noted to address in next iteration.</p>

<h3>Delivery</h3>
<p> After acceptance test, the system is deployed all over the organization either by small update package or fresh installation of the system. The final testing takes place at client end after the software is delivered. </p>

<p>Training facility is provided if required, in addition to the hard copy of user manual. </p>


<h3>Maintenance management</h3>
<p> Configuration management is an essential part of system maintenance. It is aided with version control tools to control versions, semi-version or patch management.</p>


<h2>Software Re-engineering</h2>

<p>When we need to update the software to keep it to the current market, without impacting its functionality, it is called software re-engineering. It is a thorough process  where the design of software is changed and programs are re-written.</p>

<p>Legacy software cannot keep tuning with the latest technology available in the market. As the hardware become obsolete, updating of software becomes a headache. Even if software  grows old with time, its functionality does not.  </p>

<h3>Example - </h3>
<p>Initially Unix was developed in assembly language. When language C came into existence, Unix was re-engineered in C, because working in assembly language was difficult.</p>

 <p>Other than  this, sometimes programmers notice that few parts of software need more maintenance than others and they  also need re-engineering.</p>
 <center><img src="images/reengineering_process.png" style="border:none;" alt="Process of Re-Engineering" ></center>
<h3>Re-Engineering Process</h3>
<ul class="list">
<li><b>Decide</b> what to re-engineer.  Is it whole software or a part of it?</li>
<li><b>Perform</b> Reverse Engineering, in order to obtain specifications of existing software.</li>
<li><b>Restructure Program</b> if required</li>
<ul class="list">
<li><h4>Example -</h4>
<p> changing function-oriented programs into object-oriented programs.</p></li>
</ul>

<li><b>Re-structure data</b> as required.</li>
<li><b>Apply Forward engineering</b> concepts in order to get re-engineered software.</li>
</ul>


<p>Important Terms used in Software re-engineering</p>
<h3>Reverse Engineering</h3>

<p>It is a process to achieve system specification by thoroughly analyzing, understanding the existing system.  This process can be seen as reverse SDLC model, i.e. we try to get higher abstraction level by analyzing lower abstraction levels.</p>

<p>An existing system is previously implemented design, about which we know nothing.  Designers then do reverse engineering by looking at the code and try to get the design.  With design in hand, they try to conclude the specifications.  Thus, going in reverse from code to system specification.</p>
<center><img src="images/reverse_engineering.png" style="border:none;" alt="Reverse Engineering" ></center>

<h3>Program Restructuring</h3>

<p>It is a process to re-structure and re-construct the existing software.  It is all about re-arranging the source code, either in same programming language or from one programming language to a different one.  Restructuring can have either source code-restructuring and data-restructuring or both.</p>
<p>Re-structuring does not impact the functionality of the software but enhance reliability and maintainability.  Program  components, which cause errors very frequently can be changed, or updated with re-structuring.</p>

<p>The dependability of software on obsolete hardware platform can be removed via re-structuring.</p>
<h3>Forward Engineering</h3>

<p>Forward engineering is a process of obtaining desired software from the specifications in hand which were brought down by means of reverse engineering. It assumes that there was some software engineering already done in the past.</p>
<p> Forward engineering is same as software engineering process with only one difference - it is carried out always after reverse engineering.</p>
<center><img src="images/forward_engineering.png" style="border:none;" alt="Forward Engineering" ></center>
<h2>Component reusability</h2>

<p>A component is a part of software program code, which executes an independent task in the system.  It can be a small module or sub-system itself.    </p>

<h3>Example - </h3><p>The login procedures used on the web can be considered as components, printing system in software can be seen as a component of the software.</p>
<p>Components have high  cohesion of functionality and lower rate of coupling, i.e. they work independently and can perform tasks without depending on other modules.</p>

<p>In OOP, the objects are designed are very specific to their concern and have fewer chances to be used in some other software. </p>

<p>In modular programming, the modules are coded to perform specific tasks which can be used across number of other software programs.</p>
<p>There is a whole new vertical, which is based on re-use of software component, and is known as Component Based Software Engineering (CBSE).</p>
<center><img src="images/components.png" style="border:none;" alt="Components" ></center>
<p>Re-use can be done at various levels</p>
<ul class="list">
<li><b>Application level </b>
<p> Where an entire application is used as sub-system of new software.</p></li>
<li><b>Component level </b>
<p> Where sub-system of an application is used.</p></li>
<li><b>Modules level </b>
<p> Where functional modules are re-used.</p>

<p>Software components provide interfaces, which can be used to establish communication among different components.</p></li>
</ul>


<h3>Process</h3>
<p>Two kinds of method can be adopted: either by keeping requirements same and adjusting components or by keeping components same and modifying requirements.</p>
<center><img src="images/reuse_process.png" style="border:none;" alt="Reuse Process" ></center>
<ul class="list">
<li><b>Requirement Specification</b>
<p> The functional and non-functional requirements are specified, which a software product must comply to, with the help of existing system, user input or both. </p></li>

<li><b>Design</b>
<p>This is also a standard SDLC process step, where requirements are defined in terms of software parlance.  Basic architecture of system as a whole and its sub-systems are created.</p></li>

<li><b>Specify Components </b>
<p>By studying the software design, the designers segregate the entire system into smaller components or sub-systems. One  complete software design turns into a collection of a huge set of components working together.</p></li>

<li><b>Search Suitable Components</b>
<p> The software component repository is referred by designers to search for the matching component, on the basis of functionality and intended software requirements..</p></li>

<li><b>Incorporate Components</b>
<p>  All matched components are packed together to shape them as complete software.</p></li>
</ul>

<hr>
<div class="pre-btn">
<a href="/app/software_testing_overview.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>

<div class="nxt-btn">
<a href="/app/case_tools_overview.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>


<hr>
<!-- PRINTING ENDS HERE -->
</div>
</div>
<div class="row">
<div class="col-md-2">
<div class="translate">
<div id="translation_widget" style="word-spacing:3px;background-color:transparent;position:relative;top:-7px;"></div>			
</div>
<!-- AddThis Button BEGIN -->

<!-- AddThis Button END -->
</div>
</div>
</div>
</div>
</div>
<div class="footer-copyright">
<p>&copy; Copyright 2014. All Rights Reserved.</p>
</div>
</footer>
</div>
<!-- Libs -->
<script src="/scripts/vendor/jquery.js"></script>
<script src="/scripts/js/plugins.js"></script>
<script src="/scripts/vendor/bootstrap.js"></script>
<script src="/scripts/vendor/twitterjs/twitter.js"></script>
<script src="/scripts/vendor/jquery.validate.js"></script>
<!-- Current Page Scripts -->
<script src="/scripts/js/views/view.home.js"></script>
<!-- Theme Initializer -->
<script src="/scripts/js/theme.js"></script>
<!-- Custom JS -->
<script src="/scripts/js/custom.js"></script>
</div>
</body>
</html>
